import axios from 'axios';
import config from '../config';
import { DEFAULT_COUNTRY_CODE, SUPPORTED_COUNTRIES, SUPPORTED_LANGUAGES } from '../constants/countries';
import type {
  Lottery,
  LotteriesResponse,
  Ticket,
  UserTicket,
  UserTicketDetailed,
  Cart,
  CartItem,
  ApiResponse,
  UserStats
} from '../types/lottery';

// –ë–∞–∑–æ–≤—ã–π URL API –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
const API_URL = config.apiUrl;

// –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä axios —Å –±–∞–∑–æ–≤—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
const apiClient = axios.create({
  baseURL: API_URL,
  timeout: 10000,
  headers: {
    'Content-Type': 'application/json',
  },
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–¥–∞ —Å—Ç—Ä–∞–Ω—ã –∏–∑ localStorage
function getStoredCountryCode(): string {
  const stored = localStorage.getItem('user_country_code');
  console.log('–ü–æ–ª—É—á–µ–Ω –∫–æ–¥ —Å—Ç—Ä–∞–Ω—ã –∏–∑ localStorage:', stored || '–Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º default');
  return stored || DEFAULT_COUNTRY_CODE;
}

// Mock –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
const MOCK_LOTTERIES: Lottery[] = [
  {
    id: 1,
    name: "Jackpot Million",
    description: "–ö—Ä—É–ø–Ω–µ–π—à–∏–π –¥–∂–µ–∫–ø–æ—Ç –≤ –∏—Å—Ç–æ—Ä–∏–∏! –í—ã–∏–≥—Ä–∞–π –¥–æ 1 000 000 —Å—É–º!",
    type_name: "–ù–µ–¥–µ–ª—å–Ω–∞—è",
    status: "active",
    price: 5000,
    drawn_amount: 1000000,
    participants: 234,
    next_draw_at: "2025-01-30T20:00:00Z",
    draw_date: "2025-01-30T20:00:00Z",
    end_date: "2025-01-30T18:00:00Z",
    image_url: "/lottery-jackpot.jpg"
  },
  {
    id: 2,
    name: "Daily Lucky",
    description: "–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –ª–æ—Ç–µ—Ä–µ—è —Å –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –ø—Ä–∏–∑–∞–º–∏!",
    type_name: "–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è",
    status: "active",
    price: 2000,
    drawn_amount: 50000,
    participants: 89,
    next_draw_at: "2025-01-26T21:00:00Z",
    draw_date: "2025-01-26T21:00:00Z",
    end_date: "2025-01-26T20:45:00Z",
    image_url: "/lottery-daily.jpg"
  },
  {
    id: 3,
    name: "Super Prize",
    description: "–°—É–ø–µ—Ä –ø—Ä–∏–∑ –¥–ª—è —Å—É–ø–µ—Ä–∏–≥—Ä–æ–∫–æ–≤!",
    type_name: "–ú–µ—Å—è—á–Ω–∞—è",
    status: "active",
    price: 10000,
    drawn_amount: 500000,
    participants: 156,
    next_draw_at: "2025-02-01T20:00:00Z",
    draw_date: "2025-02-01T20:00:00Z",
    end_date: "2025-02-01T19:00:00Z",
    image_url: "/lottery-super.jpg"
  },
  {
    id: 4,
    name: "Lucky Numbers",
    description: "–í—ã–±–µ—Ä–∏ —Å–≤–æ–∏ —Å—á–∞—Å—Ç–ª–∏–≤—ã–µ —á–∏—Å–ª–∞!",
    type_name: "–ù–µ–¥–µ–ª—å–Ω–∞—è",
    status: "history",
    price: 3000,
    drawn_amount: 150000,
    participants: 67,
    last_draw_at: "2025-01-20T20:00:00Z",
    image_url: "/lottery-numbers.jpg"
  }
];

const MOCK_TICKETS: Ticket[] = [
  { ticket_number: "001234", price: 5000, lottery_id: 1, status: "available" },
  { ticket_number: "001235", price: 5000, lottery_id: 1, status: "available" },
  { ticket_number: "001236", price: 5000, lottery_id: 1, status: "available" },
  { ticket_number: "002001", price: 2000, lottery_id: 2, status: "available" },
  { ticket_number: "002002", price: 2000, lottery_id: 2, status: "available" },
  { ticket_number: "003100", price: 10000, lottery_id: 3, status: "available" },
];

let mockCart: Cart = {
  items: [],
  total_price: 0,
  total_items: 0
};

const MOCK_USER_TICKETS: UserTicket[] = [
  {
    id: 1,
    lottery_id: 1,
    ticket_id: 101,
    ticket_number: "001200",
    purchased_at: "2025-01-20T14:30:00Z",
    lottery_name: "Jackpot Million",
    draw_date: "2025-01-30T20:00:00Z",
    is_drawn: false,
    lottery_type_name: "–ù–µ–¥–µ–ª—å–Ω–∞—è",
    lottery_type_id: 1,
    status: "active"
  },
  {
    id: 2,
    lottery_id: 2,
    ticket_id: 102,
    ticket_number: "002050",
    purchased_at: "2025-01-24T16:15:00Z",
    lottery_name: "Daily Lucky",
    draw_date: "2025-01-25T21:00:00Z",
    is_drawn: true,
    lottery_type_name: "–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è",
    lottery_type_id: 2,
    win_amount: 5000,
    winner_position: 3,
    status: "winner"
  }
];

// –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ü–µ–ø—Ç–æ—Ä—ã –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
if (config.apiDebug) {
  // –ò–Ω—Ç–µ—Ä—Ü–µ–ø—Ç–æ—Ä –∑–∞–ø—Ä–æ—Å–æ–≤
  apiClient.interceptors.request.use(request => {
    console.log('üöÄ API Request:', {
      url: request.url,
      method: request.method?.toUpperCase(),
      params: request.params,
      data: request.data
    });
    return request;
  });

  // –ò–Ω—Ç–µ—Ä—Ü–µ–ø—Ç–æ—Ä –æ—Ç–≤–µ—Ç–æ–≤
  apiClient.interceptors.response.use(
    response => {
      console.log('‚úÖ API Response:', {
        url: response.config.url,
        status: response.status,
        statusText: response.statusText,
        data: response.data
      });
      return response;
    },
    error => {
      console.log('‚ùå API Error:', {
        url: error.config?.url,
        status: error.response?.status,
        statusText: error.response?.statusText,
        message: error.message,
        data: error.response?.data
      });
      return Promise.reject(error);
    }
  );
}

// –î–æ–±–∞–≤–ª—è–µ–º Telegram –∑–∞–≥–æ–ª–æ–≤–∫–∏
apiClient.interceptors.request.use(config => {
  const isTelegramApp = typeof window !== 'undefined' && window.Telegram?.WebApp;
  const telegramInitData = isTelegramApp ? window.Telegram?.WebApp?.initData : null;

  if (isTelegramApp && telegramInitData) {
    // –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ –≤ Telegram - –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—Å—Ç–æ—è—â–∏–µ –¥–∞–Ω–Ω—ã–µ
    config.headers['X-Telegram-Init-Data'] = telegramInitData;
    console.log('–ó–∞–ø—Ä–æ—Å –∏–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ Telegram. –î–æ–±–∞–≤–ª–µ–Ω –∑–∞–≥–æ–ª–æ–≤–æ–∫ X-Telegram-Init-Data');
  } else if (!isTelegramApp && import.meta.env.MODE === 'development' && import.meta.env.VITE_DEV_USER_OVERRIDE === 'true') {
    // –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ –≤ –±—Ä–∞—É–∑–µ—Ä–µ - –≤–∫–ª—é—á–∞–µ–º —Ä–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
    config.headers['X-Dev-User-Override'] = 'true';
    console.log('–†–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω. –î–æ–±–∞–≤–ª–µ–Ω –∑–∞–≥–æ–ª–æ–≤–æ–∫ X-Dev-User-Override');
  }

  // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–¥ —Å—Ç—Ä–∞–Ω—ã –¥–ª—è /ticket/ –∑–∞–ø—Ä–æ—Å–æ–≤
  if (config.url?.includes('/ticket/')) {
    const countryCode = getStoredCountryCode();
    if (config.params) {
      config.params.country_code = countryCode;
    } else {
      config.params = { country_code: countryCode };
    }
    console.log(`–î–æ–±–∞–≤–ª–µ–Ω country_code: ${countryCode} –¥–ª—è ticket API`);
  }

  return config;
});

// –°–∏–º—É–ª—è—Ü–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏ –¥–ª—è —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ—Å—Ç–∏
const delay = (ms: number) => new Promise(resolve => setTimeout(resolve, ms));

// ============ API METHODS (—Å mock –¥–∞–Ω–Ω—ã–º–∏) ============

export async function getLotteries(status: 'active' | 'history' = 'active', lottery_type?: string): Promise<Lottery[]> {
  await delay(500); // –°–∏–º—É–ª—è—Ü–∏—è —Å–µ—Ç–µ–≤–æ–π –∑–∞–¥–µ—Ä–∂–∫–∏
  
  console.log(`üì° Mock API: getLotteries(status=${status}, lottery_type=${lottery_type})`);
  
  let filteredLotteries = MOCK_LOTTERIES.filter(lottery => lottery.status === status);
  
  if (lottery_type) {
    filteredLotteries = filteredLotteries.filter(lottery => 
      lottery.type_name.toLowerCase().includes(lottery_type.toLowerCase())
    );
  }
  
  return filteredLotteries;
}

export async function getAvailableTickets(
  type: 'auto' | 'manual', 
  quantity?: number, 
  mask?: string, 
  lotteryId?: number
): Promise<Ticket[]> {
  await delay(300);
  
  console.log(`üì° Mock API: getAvailableTickets(type=${type}, quantity=${quantity}, lotteryId=${lotteryId})`);
  
  let filteredTickets = [...MOCK_TICKETS];
  
  if (lotteryId) {
    filteredTickets = filteredTickets.filter(ticket => ticket.lottery_id === lotteryId);
  }
  
  if (quantity) {
    filteredTickets = filteredTickets.slice(0, quantity);
  }
  
  return filteredTickets;
}

export async function addTicketNumbersToCart(ticketNumbers: string[]): Promise<boolean> {
  await delay(200);
  
  console.log(`üì° Mock API: addTicketNumbersToCart`, ticketNumbers);
  
  for (const ticketNumber of ticketNumbers) {
    const ticket = MOCK_TICKETS.find(t => t.ticket_number === ticketNumber);
    if (ticket) {
      const cartItem: CartItem = {
        id: `cart_${Date.now()}_${Math.random()}`,
        ticket_number: ticketNumber,
        lottery_id: ticket.lottery_id,
        lottery_name: MOCK_LOTTERIES.find(l => l.id === ticket.lottery_id)?.name,
        price: ticket.price
      };
      mockCart.items.push(cartItem);
    }
  }
  
  updateCartTotals();
  return true;
}

export async function addTicketToCart(lotteryId: number, quantity: number): Promise<boolean> {
  await delay(200);
  
  console.log(`üì° Mock API: addTicketToCart(lotteryId=${lotteryId}, quantity=${quantity})`);
  
  const lottery = MOCK_LOTTERIES.find(l => l.id === lotteryId);
  if (!lottery) return false;
  
  for (let i = 0; i < quantity; i++) {
    const ticketNumber = `${lotteryId.toString().padStart(3, '0')}${Math.floor(Math.random() * 1000).toString().padStart(3, '0')}`;
    const cartItem: CartItem = {
      id: `cart_${Date.now()}_${Math.random()}`,
      ticket_number: ticketNumber,
      lottery_id: lotteryId,
      lottery_name: lottery.name,
      price: lottery.price
    };
    mockCart.items.push(cartItem);
  }
  
  updateCartTotals();
  return true;
}

export async function getUserCart(): Promise<Cart | null> {
  await delay(100);
  
  console.log(`üì° Mock API: getUserCart`);
  
  return { ...mockCart };
}

export async function removeFromCart(ticketId?: string): Promise<boolean> {
  await delay(100);
  
  console.log(`üì° Mock API: removeFromCart(ticketId=${ticketId})`);
  
  if (ticketId) {
    mockCart.items = mockCart.items.filter(item => item.id !== ticketId);
  } else {
    mockCart.items = [];
  }
  
  updateCartTotals();
  return true;
}

export async function paymentCart(paymentMethod: string): Promise<boolean> {
  await delay(1000); // –î–æ–ª—å—à–µ –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞
  
  console.log(`üì° Mock API: paymentCart(paymentMethod=${paymentMethod})`);
  
  // –°–∏–º—É–ª—è—Ü–∏—è —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã
  const success = Math.random() > 0.1; // 90% —É—Å–ø–µ—Ö–∞
  
  if (success) {
    mockCart = { items: [], total_price: 0, total_items: 0 };
  }
  
  return success;
}

export async function getUserTickets(
  status: 'active' | 'history' | 'winner' = 'active', 
  lotteryId?: number
): Promise<UserTicket[]> {
  await delay(400);
  
  console.log(`üì° Mock API: getUserTickets(status=${status}, lotteryId=${lotteryId})`);
  
  let filteredTickets = [...MOCK_USER_TICKETS];
  
  if (status !== 'active') {
    filteredTickets = filteredTickets.filter(ticket => ticket.status === status);
  } else {
    filteredTickets = filteredTickets.filter(ticket => ticket.status === 'active');
  }
  
  if (lotteryId) {
    filteredTickets = filteredTickets.filter(ticket => ticket.lottery_id === lotteryId);
  }
  
  return filteredTickets;
}

export async function getUserTicketDetails(id: number, withLeaderboard: boolean = false): Promise<UserTicketDetailed | null> {
  await delay(300);
  
  console.log(`üì° Mock API: getUserTicketDetails(id=${id}, withLeaderboard=${withLeaderboard})`);
  
  const userTicket = MOCK_USER_TICKETS.find(ticket => ticket.id === id);
  if (!userTicket) return null;
  
  const lottery = MOCK_LOTTERIES.find(l => l.id === userTicket.lottery_id);
  if (!lottery) return null;
  
  const detailed: UserTicketDetailed = {
    ...userTicket,
    lottery,
    is_winner: !!userTicket.win_amount,
    winning_amount: userTicket.win_amount ?? undefined
  };
  
  if (withLeaderboard) {
    detailed.leaderboard = [
      { position: 1, ticket_number: "001199", user_name: "–ê–Ω–≤–∞—Ä", prize_amount: 100000 },
      { position: 2, ticket_number: "001156", user_name: "–ú–∞–ª–∏–∫–∞", prize_amount: 50000 },
      { position: 3, ticket_number: "002050", prize_amount: 25000 },
    ];
  }
  
  return detailed;
}

export async function getLotteryInfo(lotteryId: number): Promise<any> {
  await delay(200);
  
  console.log(`üì° Mock API: getLotteryInfo(lotteryId=${lotteryId})`);
  
  const lottery = MOCK_LOTTERIES.find(l => l.id === lotteryId);
  return lottery ? {
    lottery,
    rules: "–ü—Ä–∞–≤–∏–ª–∞ –ª–æ—Ç–µ—Ä–µ–∏...",
    prizes: ["–ì–ª–∞–≤–Ω—ã–π –ø—Ä–∏–∑", "–í—Ç–æ—Ä–æ–π –ø—Ä–∏–∑", "–¢—Ä–µ—Ç–∏–π –ø—Ä–∏–∑"]
  } : null;
}

export async function getUserStatistics(): Promise<UserStats> {
  await delay(300);
  
  console.log(`üì° Mock API: getUserStatistics`);
  
  return {
    total_tickets: 15,
    active_tickets: 3,
    total_winnings: 25000,
    biggest_win: 15000,
    tickets_this_month: 8
  };
}

export async function getUserProfile(): Promise<any> {
  await delay(200);
  
  console.log(`üì° Mock API: getUserProfile`);
  
  return {
    id: "12345678",
    first_name: "Test",
    last_name: "User",
    username: "test_user",
    user_country_code: getStoredCountryCode(),
    user_language_code: localStorage.getItem('user_language_code') || 'ru',
    coins: 45000,
    level: 3,
    created_at: "2024-01-15T10:00:00Z"
  };
}

export async function saveUserSettings(country: string, language: string): Promise<boolean> {
  await delay(400);
  
  console.log(`üì° Mock API: saveUserSettings(country=${country}, language=${language})`);
  
  try {
    // –ò–º–∏—Ç–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ localStorage –¥–ª—è dev —Ä–µ–∂–∏–º–∞
    localStorage.setItem('user_country_code', country.trim());
    localStorage.setItem('user_language_code', language.trim());
    console.log('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ localStorage –¥–ª—è —Ä–µ–∂–∏–º–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏');
    
    return true;
  } catch (error: any) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
    return false;
  }
}

export async function getAvailableSettings(): Promise<{countries: any[], languages: any[]}> {
  await delay(200);
  
  console.log(`üì° Mock API: getAvailableSettings`);
  
  return {
    countries: SUPPORTED_COUNTRIES,
    languages: SUPPORTED_LANGUAGES
  };
}

// Helper —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è totals –≤ –∫–æ—Ä–∑–∏–Ω–µ
function updateCartTotals() {
  mockCart.total_items = mockCart.items.length;
  mockCart.total_price = mockCart.items.reduce((sum, item) => sum + item.price, 0);
}

// –≠–∫—Å–ø–æ—Ä—Ç default –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
export default {
  getLotteries,
  getAvailableTickets,
  addTicketNumbersToCart,
  addTicketToCart,
  getUserCart,
  removeFromCart,
  paymentCart,
  getUserTickets,
  getUserTicketDetails,
  getLotteryInfo,
  getUserStatistics,
  getUserProfile,
  saveUserSettings,
  getAvailableSettings
}; 