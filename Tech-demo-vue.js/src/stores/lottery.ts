import { ref, computed } from 'vue'
import { defineStore } from 'pinia'
import api from '../services/api'
import type { Lottery, Cart, UserTicket } from '../types/lottery'

export const useLotteryStore = defineStore('lottery', () => {
  // State
  const lotteries = ref<Lottery[]>([])
  const activeLotteries = ref<Lottery[]>([])
  const historyLotteries = ref<Lottery[]>([])
  const cart = ref<Cart>({ items: [], total_price: 0, total_items: 0 })
  const userTickets = ref<UserTicket[]>([])
  
  // Loading states
  const loading = ref<boolean>(false)
  const cartLoading = ref<boolean>(false)
  const ticketsLoading = ref<boolean>(false)
  
  // Error states
  const error = ref<string | null>(null)
  const cartError = ref<string | null>(null)

  // Getters
  const cartItemsCount = computed(() => cart.value.total_items)
  const cartTotalPrice = computed(() => cart.value.total_price)
  const hasCartItems = computed(() => cart.value.items.length > 0)
  
  const activeTicketsCount = computed(() => 
    userTickets.value.filter(ticket => ticket.status === 'active').length
  )
  
  const winningTicketsCount = computed(() => 
    userTickets.value.filter(ticket => ticket.status === 'winner').length
  )

  // Actions
  async function fetchLotteries(status: 'active' | 'history' = 'active', lotteryType?: string) {
    loading.value = true
    error.value = null
    
    try {
      const fetchedLotteries = await api.getLotteries(status, lotteryType)
      
      if (status === 'active') {
        activeLotteries.value = fetchedLotteries
        lotteries.value = [...fetchedLotteries, ...historyLotteries.value]
      } else {
        historyLotteries.value = fetchedLotteries
        lotteries.value = [...activeLotteries.value, ...fetchedLotteries]
      }
      
      console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${fetchedLotteries.length} –ª–æ—Ç–µ—Ä–µ–π (${status})`)
    } catch (e) {
      error.value = '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ª–æ—Ç–µ—Ä–µ–π'
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ª–æ—Ç–µ—Ä–µ–π:', e)
    } finally {
      loading.value = false
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –ª–æ—Ç–µ—Ä–µ–∏ –ø–æ ID
  function getLotteryById(id: number): Lottery | null {
    return lotteries.value.find(lottery => lottery.id === id) || null
  }

  // –†–∞–±–æ—Ç–∞ —Å –∫–æ—Ä–∑–∏–Ω–æ–π
  async function loadCart() {
    cartLoading.value = true
    cartError.value = null
    
    try {
      const loadedCart = await api.getUserCart()
      if (loadedCart) {
        cart.value = loadedCart
        console.log('‚úÖ –ö–æ—Ä–∑–∏–Ω–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞:', loadedCart)
      }
    } catch (e) {
      cartError.value = '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ—Ä–∑–∏–Ω—ã'
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ—Ä–∑–∏–Ω—ã:', e)
    } finally {
      cartLoading.value = false
    }
  }

  async function addToCart(lotteryId: number, quantity: number = 1) {
    cartLoading.value = true
    cartError.value = null
    
    try {
      const success = await api.addTicketToCart(lotteryId, quantity)
      if (success) {
        await loadCart() // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É
        console.log(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∫–æ—Ä–∑–∏–Ω—É: –ª–æ—Ç–µ—Ä–µ—è ${lotteryId}, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ ${quantity}`)
        return true
      }
      return false
    } catch (e) {
      cartError.value = '–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ –∫–æ—Ä–∑–∏–Ω—É'
      console.error('‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∫–æ—Ä–∑–∏–Ω—É:', e)
      return false
    } finally {
      cartLoading.value = false
    }
  }

  async function removeFromCart(ticketId?: string) {
    cartLoading.value = true
    cartError.value = null
    
    try {
      const success = await api.removeFromCart(ticketId)
      if (success) {
        await loadCart() // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É
        console.log('‚úÖ –£–¥–∞–ª–µ–Ω–æ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã')
        return true
      }
      return false
    } catch (e) {
      cartError.value = '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã'
      console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã:', e)
      return false
    } finally {
      cartLoading.value = false
    }
  }

  async function clearCart() {
    return await removeFromCart() // –£–¥–∞–ª—è–µ–º –≤—Å–µ
  }

  async function payCart(paymentMethod: string = 'default') {
    cartLoading.value = true
    cartError.value = null
    
    try {
      const success = await api.paymentCart(paymentMethod)
      if (success) {
        cart.value = { items: [], total_price: 0, total_items: 0 }
        console.log('‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ')
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –±–∏–ª–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await loadUserTickets()
        return true
      } else {
        cartError.value = '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–∞'
        return false
      }
    } catch (e) {
      cartError.value = '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø–ª–∞—Ç–µ'
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–ø–ª–∞—Ç—ã:', e)
      return false
    } finally {
      cartLoading.value = false
    }
  }

  // –†–∞–±–æ—Ç–∞ —Å –±–∏–ª–µ—Ç–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  async function loadUserTickets(status: 'active' | 'history' | 'winner' = 'active', lotteryId?: number) {
    ticketsLoading.value = true
    error.value = null
    
    try {
      userTickets.value = await api.getUserTickets(status, lotteryId)
      console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${userTickets.value.length} –±–∏–ª–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (${status})`)
    } catch (e) {
      error.value = '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –±–∏–ª–µ—Ç–æ–≤'
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –±–∏–ª–µ—Ç–æ–≤:', e)
    } finally {
      ticketsLoading.value = false
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∏–ª–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID
  async function getUserTicketDetails(ticketId: number, withLeaderboard: boolean = false) {
    try {
      const ticketDetails = await api.getUserTicketDetails(ticketId, withLeaderboard)
      console.log('‚úÖ –î–µ—Ç–∞–ª–∏ –±–∏–ª–µ—Ç–∞ –∑–∞–≥—Ä—É–∂–µ–Ω—ã')
      return ticketDetails
    } catch (e) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–µ—Ç–∞–ª–µ–π –±–∏–ª–µ—Ç–∞:', e)
      return null
    }
  }

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
  async function initializeStore() {
    console.log('üéØ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è lottery store...')
    
    await Promise.all([
      fetchLotteries('active'),
      loadCart(),
      loadUserTickets('active')
    ])
    
    console.log('‚úÖ Lottery store –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω')
  }

  return { 
    // State
    lotteries,
    activeLotteries, 
    historyLotteries,
    cart,
    userTickets,
    loading,
    cartLoading,
    ticketsLoading,
    error,
    cartError,
    
    // Getters
    cartItemsCount,
    cartTotalPrice,
    hasCartItems,
    activeTicketsCount,
    winningTicketsCount,
    
    // Actions
    fetchLotteries, 
    getLotteryById,
    loadCart,
    addToCart,
    removeFromCart,
    clearCart,
    payCart,
    loadUserTickets,
    getUserTicketDetails,
    initializeStore
  }
}) 