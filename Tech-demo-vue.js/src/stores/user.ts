import { ref, computed } from 'vue'
import { defineStore } from 'pinia'
import api from '../services/api'
import { DEFAULT_COUNTRY_CODE, DEFAULT_LANGUAGE_CODE } from '../constants/countries'
import { setupDevUserOverride } from '../utils/setupDevUserOverride'

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è localStorage
const USER_COUNTRY_CODE_KEY = 'user_country_code'
const USER_LANGUAGE_CODE_KEY = 'user_language_code'

export const useUserStore = defineStore('user', () => {
  const id = ref<string | null>(null)
  const firstName = ref<string>('')
  const lastName = ref<string>('')
  const username = ref<string>('')
  const coins = ref<number>(0)
  const activeTickets = ref<number>(0)
  const isAuthenticated = ref<boolean>(false)
  const country = ref<string>('')
  const language = ref<string>('')
  const hasUserSettings = ref<boolean>(false)
  const level = ref<number>(1)
  const loading = ref<boolean>(false)

  // –ì–µ—Ç—Ç–µ—Ä –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –∏–º–µ–Ω–∏
  const fullName = computed(() => {
    if (firstName.value && lastName.value) {
      return `${firstName.value} ${lastName.value}`
    }
    if (firstName.value) {
      return firstName.value
    }
    if (username.value) {
      return `@${username.value}`
    }
    return '–ì–æ—Å—Ç—å'
  })

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–¥–∞ —Å—Ç—Ä–∞–Ω—ã –≤ localStorage
  function saveCountryCodeToStorage(countryCode: string) {
    if (countryCode) {
      localStorage.setItem(USER_COUNTRY_CODE_KEY, countryCode)
      console.log(`–ö–æ–¥ —Å—Ç—Ä–∞–Ω—ã "${countryCode}" —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ localStorage`)
    }
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–¥–∞ —è–∑—ã–∫–∞ –≤ localStorage
  function saveLanguageCodeToStorage(languageCode: string) {
    if (languageCode) {
      localStorage.setItem(USER_LANGUAGE_CODE_KEY, languageCode)
      console.log(`–ö–æ–¥ —è–∑—ã–∫–∞ "${languageCode}" —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ localStorage`)
    }
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–¥–∞ —Å—Ç—Ä–∞–Ω—ã –∏–∑ localStorage
  function getCountryCodeFromStorage(): string {
    return localStorage.getItem(USER_COUNTRY_CODE_KEY) || DEFAULT_COUNTRY_CODE
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–¥–∞ —è–∑—ã–∫–∞ –∏–∑ localStorage
  function getLanguageCodeFromStorage(): string {
    return localStorage.getItem(USER_LANGUAGE_CODE_KEY) || DEFAULT_LANGUAGE_CODE
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Telegram
  async function initUserFromTelegram() {
    try {
      loading.value = true
      
      // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º dev mock –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
      setupDevUserOverride()

      const telegramUser = window.Telegram?.WebApp?.initDataUnsafe?.user
      
      if (telegramUser) {
        id.value = telegramUser.id?.toString() || null
        firstName.value = telegramUser.first_name || ''
        lastName.value = telegramUser.last_name || ''
        username.value = telegramUser.username || ''
        isAuthenticated.value = true
        
        console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –∏–∑ Telegram:', telegramUser)
      } else {
        // –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –±—Ä–∞—É–∑–µ—Ä–µ —É—Å—Ç–∞–Ω–æ–≤–∏–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        id.value = '12345678'
        firstName.value = 'Test'
        lastName.value = 'User'
        username.value = 'test_user'
        isAuthenticated.value = true
        
        console.log('‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã —Ñ–∏–∫—Ç–∏–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
      }
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∂–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
      await loadUserSettings()
      
      console.log('üéØ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞')
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error)
      // –£—Å—Ç–∞–Ω–æ–≤–∏–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
      id.value = '12345678'
      firstName.value = 'Test'
      lastName.value = 'User'
      isAuthenticated.value = true
      coins.value = 10000
      activeTickets.value = 2
    } finally {
      loading.value = false
    }
  }
  
  // –ú–µ—Ç–æ–¥ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  async function loadUserSettings() {
    try {
      const profile = await api.getUserProfile()
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤ –ø—Ä–æ—Ñ–∏–ª–µ (–ø–æ–ª—è user_country_code –∏ user_language_code)
      if (profile && profile.user_country_code && profile.user_language_code) {
        country.value = profile.user_country_code
        language.value = profile.user_language_code
        hasUserSettings.value = true
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–¥—ã –≤ localStorage –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ API –∑–∞–ø—Ä–æ—Å–∞—Ö
        saveCountryCodeToStorage(profile.user_country_code)
        saveLanguageCodeToStorage(profile.user_language_code)
        
        console.log('‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω—ã –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', { 
          country: country.value, 
          language: language.value 
        })
      } else {
        // –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ localStorage
        const storedCountry = getCountryCodeFromStorage()
        const storedLanguage = getLanguageCodeFromStorage()
        
        country.value = storedCountry
        language.value = storedLanguage
        hasUserSettings.value = false
        
        console.log('‚ö†Ô∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ localStorage')
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è
      if (profile) {
        coins.value = profile.coins || 0
        level.value = profile.level || 1
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error)
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
      country.value = getCountryCodeFromStorage()
      language.value = getLanguageCodeFromStorage()
      hasUserSettings.value = false
    }
  }
  
  // –ú–µ—Ç–æ–¥ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  async function saveUserSettings(countryCode: string, languageCode: string) {
    try {
      loading.value = true
      
      const result = await api.saveUserSettings(countryCode, languageCode)
      
      if (result) {
        country.value = countryCode
        language.value = languageCode
        hasUserSettings.value = true
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–¥—ã –≤ localStorage –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ API –∑–∞–ø—Ä–æ—Å–∞—Ö
        saveCountryCodeToStorage(countryCode)
        saveLanguageCodeToStorage(languageCode)
        
        console.log('‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω—ã –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', { 
          country: country.value, 
          language: language.value 
        })
        
        return true
      }
      
      return false
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error)
      return false
    } finally {
      loading.value = false
    }
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  async function updateUserStats() {
    try {
      const stats = await api.getUserStatistics()
      activeTickets.value = stats.active_tickets
      console.log('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞')
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error)
    }
  }

  return { 
    // State
    id, 
    firstName, 
    lastName, 
    username, 
    coins, 
    activeTickets, 
    isAuthenticated,
    country,
    language,
    hasUserSettings,
    level,
    loading,
    
    // Getters
    fullName, 
    
    // Actions
    initUserFromTelegram,
    loadUserSettings,
    saveUserSettings,
    updateUserStats,
    getCountryCodeFromStorage,
    getLanguageCodeFromStorage
  }
}) 