<?php

namespace process;

use app\command\ConsumeSchedulesCommand;
use Closure;
use support\Log;
use Symfony\Component\Console\Input\ArrayInput;
use Symfony\Component\Console\Output\BufferedOutput;
use Workerman\Timer;

/**
 * –ü—Ä–æ—Ü–µ—Å—Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –∫–æ–Ω—Å—å—é–º–µ—Ä–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π –ª–æ—Ç–µ—Ä–µ–π
 * –ü–æ—Å—Ç–æ—è–Ω–Ω–æ —Ä–∞–±–æ—Ç–∞—é—â–∏–π –ø—Ä–æ—Ü–µ—Å—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π –∏–∑ Kafka
 */
class ConsumeSchedulesProcess
{
    private const string PROCESS_LOG_CHANNEL = 'process_consume_schedules';

    public function onWorkerStart(): void
    {
        $logger = Log::channel(self::PROCESS_LOG_CHANNEL);
        $logger->info('–ü—Ä–æ—Ü–µ—Å—Å –∫–æ–Ω—Å—å—é–º–µ—Ä–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π –ª–æ—Ç–µ—Ä–µ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω', [
            'description' => '–ü–æ—Å—Ç–æ—è–Ω–Ω–æ —Ä–∞–±–æ—Ç–∞—é—â–∏–π –ø—Ä–æ—Ü–µ—Å—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π –∏–∑ Kafka'
        ]);

        // –ó–∞–ø—É—Å–∫ –∫–æ–Ω—Å—å—é–º–µ—Ä–∞ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥ –ø–æ—Å–ª–µ —Å—Ç–∞—Ä—Ç–∞ –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        Timer::add(5, $this->startConsumeSchedulesCommand(), [], false);
    }

    /**
     * –ó–∞–ø—É—Å–∫–∞–µ—Ç –∫–æ–Ω—Å—å—é–º–µ—Ä —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π –ª–æ—Ç–µ—Ä–µ–π
     */
    private function startConsumeSchedulesCommand(): Closure
    {
        return function () {
            $logger = Log::channel(self::PROCESS_LOG_CHANNEL);
            $startTime = microtime(true);

            $logger->info('üìÖ –ó–∞–ø—É—Å–∫ –∫–æ–Ω—Å—å—é–º–µ—Ä–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π –ª–æ—Ç–µ—Ä–µ–π', [
                'timestamp' => date('Y-m-d H:i:s'),
                'process_pid' => getmypid()
            ]);

            try {
                // –ü—Ä—è–º–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã –±–µ–∑ Application
                $command = new ConsumeSchedulesCommand();

                // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –≤–≤–æ–¥ –∏ –≤—ã–≤–æ–¥
                $input = new ArrayInput([]);
                $output = new BufferedOutput();

                // –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É –Ω–∞–ø—Ä—è–º—É—é
                $exitCode = $command->run($input, $output);
                $commandOutput = $output->fetch();

                $executionTime = round((microtime(true) - $startTime) * 1000, 2);

                if ($exitCode === 0) {
                    $logger->info('‚úÖ –ö–æ–Ω—Å—å—é–º–µ—Ä —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ', [
                        'exit_code' => $exitCode,
                        'execution_time_ms' => $executionTime,
                        'output' => trim($commandOutput) ?: '–ù–µ—Ç –≤—ã–≤–æ–¥–∞'
                    ]);
                } else {
                    $logger->error('‚ùå –ö–æ–Ω—Å—å—é–º–µ—Ä —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π', [
                        'exit_code' => $exitCode,
                        'execution_time_ms' => $executionTime,
                        'output' => trim($commandOutput) ?: '–ù–µ—Ç –≤—ã–≤–æ–¥–∞'
                    ]);
                }

                // –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥ –≤ —Å–ª—É—á–∞–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
                Timer::add(10, $this->startConsumeSchedulesCommand(), [], false);

                $logger->info('üîÑ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∫–æ–Ω—Å—å—é–º–µ—Ä–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥');
            } catch (\Exception $e) {
                $executionTime = round((microtime(true) - $startTime) * 1000, 2);

                $logger->error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –∫–æ–Ω—Å—å—é–º–µ—Ä–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π', [
                    'error_message' => $e->getMessage(),
                    'error_file' => $e->getFile(),
                    'error_line' => $e->getLine(),
                    'execution_time_ms' => $executionTime,
                    'trace' => $e->getTraceAsString()
                ]);

                // –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
                Timer::add(30, $this->startConsumeSchedulesCommand(), [], false);

                $logger->info('üîÑ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∫–æ–Ω—Å—å—é–º–µ—Ä–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥ –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏');
            }
        };
    }
}
