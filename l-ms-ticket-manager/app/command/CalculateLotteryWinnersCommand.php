<?php

namespace app\command;

use app\services\LeaderBoardService;
use app\model\LotteryNumber;
use Carbon\Carbon;
use Exception;
use Psr\Log\LoggerInterface;
use support\Log;
use Symfony\Component\Console\Command\Command;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Input\InputOption;
use Symfony\Component\Console\Output\OutputInterface;

/**
 * –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π –ª–æ—Ç–µ—Ä–µ–π
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ª–æ—Ç–µ—Ä–µ–∏, —É –∫–æ—Ç–æ—Ä—ã—Ö –ø—Ä–æ–¥–∞–∂–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å 2+ –º–∏–Ω—É—Ç—ã –Ω–∞–∑–∞–¥
 */
class CalculateLotteryWinnersCommand extends Command
{
    protected static string $defaultName = 'calculate_lottery_winners:run';
    protected static string $defaultDescription = '–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π –¥–ª—è –∑–∞–∫—Ä—ã—Ç—ã—Ö –ª–æ—Ç–µ—Ä–µ–π';

    private const int MINUTES_AFTER_END = 2; // –ñ–¥–µ–º 2 –º–∏–Ω—É—Ç—ã –ø–æ—Å–ª–µ –∑–∞–∫—Ä—ã—Ç–∏—è –ø—Ä–æ–¥–∞–∂
    private LoggerInterface $logger;

    protected function execute(InputInterface $input, OutputInterface $output): int
    {
        $this->logger = Log::channel('command_calculate_lottery_winners');
        $startTime = microtime(true);
        $specificLotteryId = (int) $input->getOption('lottery-id');

        $this->logger->info('üßÆ –ó–∞–ø—É—Å–∫ —Ä–∞—Å—á–µ—Ç–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π', [
            'specific_lottery_id' => $specificLotteryId ?: '–≤—Å–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ',
            'minutes_after_end' => self::MINUTES_AFTER_END
        ]);

        try {
            // –ù–∞—Ö–æ–¥–∏–º –ª–æ—Ç–µ—Ä–µ–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
            $query = LotteryNumber::where('is_drawn', false)
                ->where('is_active', true)
                ->whereNotNull('prize_configuration_id')
                ->whereNull('calculated_winners_count'); // –¢–æ–ª—å–∫–æ —Ç–µ, –≥–¥–µ –µ—â–µ –Ω–µ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–æ

            if ($specificLotteryId) {
                $query->where('id', $specificLotteryId);
            } else {
                // –ü—Ä–æ–¥–∞–∂–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å 2+ –º–∏–Ω—É—Ç—ã –Ω–∞–∑–∞–¥
                $cutoffTime = Carbon::now()->subMinutes(self::MINUTES_AFTER_END);
                $query->where('end_date', '<=', $cutoffTime);
            }

            $lotteries = $query->get();

            if ($lotteries->isEmpty()) {
                $executionTime = round((microtime(true) - $startTime) * 1000, 2);
                $this->logger->info('üîç –ù–µ—Ç –ª–æ—Ç–µ—Ä–µ–π –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π', [
                    'execution_time_ms' => $executionTime
                ]);
                $output->writeln("–ù–µ—Ç –ª–æ—Ç–µ—Ä–µ–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏");
                return Command::SUCCESS;
            }

            $this->logger->info('üìã –ù–∞–π–¥–µ–Ω—ã –ª–æ—Ç–µ—Ä–µ–∏ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞', [
                'count' => $lotteries->count(),
                'lottery_ids' => $lotteries->pluck('id')->toArray()
            ]);

            $successCount = 0;
            $errorCount = 0;

            foreach ($lotteries as $lottery) {
                try {
                    $lotteryStartTime = microtime(true);

                    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π
                    $leaderBoardService = new LeaderBoardService($lottery->id);
                    $leaderBoard = $leaderBoardService->getLeaderBoard();
                    $winnersCount = count($leaderBoard['prize_details']);

                    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
                    $lottery->calculated_winners_count = $winnersCount;
                    $lottery->save();

                    $lotteryExecutionTime = round((microtime(true) - $lotteryStartTime) * 1000, 2);
                    $successCount++;

                    $this->logger->info('‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–æ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ', [
                        'lottery_id' => $lottery->id,
                        'lottery_type' => $lottery->lotteryType->name,
                        'winners_count' => $winnersCount,
                        'participants' => $leaderBoard['players_quantity'],
                        'tickets_sold' => $leaderBoard['paid_tickets_count'],
                        'execution_time_ms' => $lotteryExecutionTime
                    ]);

                    $output->writeln("‚úÖ –õ–æ—Ç–µ—Ä–µ—è {$lottery->id}: {$winnersCount} –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π");
                } catch (Exception $e) {
                    $errorCount++;
                    $this->logger->error('‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π', [
                        'lottery_id' => $lottery->id,
                        'error_message' => $e->getMessage(),
                        'error_file' => $e->getFile(),
                        'error_line' => $e->getLine()
                    ]);

                    $output->writeln("‚ùå –û—à–∏–±–∫–∞ –¥–ª—è –ª–æ—Ç–µ—Ä–µ–∏ {$lottery->id}: {$e->getMessage()}");
                }
            }

            $totalExecutionTime = round((microtime(true) - $startTime) * 1000, 2);

            $this->logger->info('üèÅ –†–∞—Å—á–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π –∑–∞–≤–µ—Ä—à–µ–Ω', [
                'total_lotteries' => $lotteries->count(),
                'success_count' => $successCount,
                'error_count' => $errorCount,
                'total_execution_time_ms' => $totalExecutionTime
            ]);

            $output->writeln("–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {$lotteries->count()}, —É—Å–ø–µ—à–Ω–æ: {$successCount}, –æ—à–∏–±–æ–∫: {$errorCount}");
        } catch (Exception $e) {
            $executionTime = round((microtime(true) - $startTime) * 1000, 2);

            $this->logger->error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π', [
                'error_message' => $e->getMessage(),
                'error_file' => $e->getFile(),
                'error_line' => $e->getLine(),
                'execution_time_ms' => $executionTime,
                'trace' => $e->getTraceAsString()
            ]);

            $output->writeln("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {$e->getMessage()}");
            return Command::FAILURE;
        }

        return Command::SUCCESS;
    }

    protected function configure(): void
    {
        $this->setName(self::$defaultName)
            ->setDescription(self::$defaultDescription)
            ->addOption('lottery-id', null, InputOption::VALUE_REQUIRED, 'ID –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ª–æ—Ç–µ—Ä–µ–∏ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é - –≤—Å–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ)');
    }
}
