<?php

namespace app\command;

use app\libraries\kafka\messages\KafkaProducerMessage;
use app\libraries\kafka\producers\Producer;
use app\services\LeaderBoardService;
use app\services\TicketService;
use app\model\LotteryNumber;
use Carbon\Carbon;
use Exception;
use Psr\Log\LoggerInterface;
use support\Log;
use Symfony\Component\Console\Command\Command;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Input\InputArgument;
use Symfony\Component\Console\Input\InputOption;
use Symfony\Component\Console\Output\OutputInterface;

class ExportLotteryWinnersConfigCommand extends Command
{
    protected static string $defaultName = 'export_lottery_winners_config:run';
    protected static string $defaultDescription = '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π –ª–æ—Ç–µ—Ä–µ–∏ –≤ Kafka –¥–ª—è ms-draw-service';

    private Producer $producer;
    private LoggerInterface $logger;
    private TicketService $ticketService;





    protected function execute(InputInterface $input, OutputInterface $output): int
    {
        $this->producer = Producer::createFromConfigKey(
            'tickets',
            config('kafka.lottery_draw_config_topic', 'lottery-draw-config')
        );
        $this->logger = Log::channel('command_export_lottery_winners_config');
        $this->ticketService = new TicketService();
        
        $startTime = microtime(true);
        $specificLotteryId = (int) $input->getOption('lottery-id');

        $this->logger->info('üéØ –ó–∞–ø—É—Å–∫ —ç–∫—Å–ø–æ—Ä—Ç–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π', [
            'specific_lottery_id' => $specificLotteryId ?: '–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫'
        ]);

        try {
            // –ü–æ–ª—É—á–∞–µ–º –ª–æ—Ç–µ—Ä–µ–∏ –≥–æ—Ç–æ–≤—ã–µ –∫ —ç–∫—Å–ø–æ—Ä—Ç—É
            if ($specificLotteryId) {
                // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π —ç–∫—Å–ø–æ—Ä—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ª–æ—Ç–µ—Ä–µ–∏
                $lotteries = $this->getLotteryById($specificLotteryId);
            } else {
                // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ –≥–æ—Ç–æ–≤—ã—Ö –ª–æ—Ç–µ—Ä–µ–π
                $lotteries = $this->ticketService->getLotteriesReadyForWinnersConfigExport();
            }

            if (empty($lotteries)) {
                $executionTime = round((microtime(true) - $startTime) * 1000, 2);
                $this->logger->info('üîç –ù–µ—Ç –ª–æ—Ç–µ—Ä–µ–π –≥–æ—Ç–æ–≤—ã—Ö –∫ —ç–∫—Å–ø–æ—Ä—Ç—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π', [
                    'execution_time_ms' => $executionTime
                ]);
                $output->writeln("–ù–µ—Ç –ª–æ—Ç–µ—Ä–µ–π –≥–æ—Ç–æ–≤—ã—Ö –∫ —ç–∫—Å–ø–æ—Ä—Ç—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π");
                return Command::SUCCESS;
            }

            $this->logger->info('üìã –ù–∞–π–¥–µ–Ω—ã –ª–æ—Ç–µ—Ä–µ–∏ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏', [
                'count' => count($lotteries),
                'lottery_ids' => array_column($lotteries, 'id')
            ]);

            $successCount = 0;
            $errorCount = 0;

            foreach ($lotteries as $lotteryData) {
                try {
                    $lotteryStartTime = microtime(true);
                    $lotteryId = $lotteryData['id'];
                    
                    // –ü–æ–ª—É—á–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
                    $leaderBoardService = new LeaderBoardService($lotteryId);
                    $leaderBoard = $leaderBoardService->getLeaderBoard();
                    
                    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è Kafka
                    $body = [
                        'event_type' => 'lottery_winners_config',
                        'lottery_id' => $lotteryId,
                        'lottery_type' => $lotteryData['lottery_type'],
                        'calculated_winners_count' => $lotteryData['calculated_winners_count'],
                        'total_participants' => $leaderBoard['players_quantity'],
                        'total_tickets_sold' => $leaderBoard['paid_tickets_count'],
                        'timestamp' => Carbon::now()->toISOString()
                    ];

                    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Kafka
                    $message = new KafkaProducerMessage($body);
                    $this->producer->sendMessage($message);

                    // –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é
                    $this->ticketService->markLotteryWinnersConfigExported($lotteryId);

                    $lotteryExecutionTime = round((microtime(true) - $lotteryStartTime) * 1000, 2);
                    $successCount++;

                    $this->logger->info('‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ Kafka', [
                        'lottery_id' => $lotteryId,
                        'lottery_name' => $lotteryData['lottery_name'],
                        'lottery_type' => $lotteryData['lottery_type'],
                        'winners_count' => $lotteryData['calculated_winners_count'],
                        'participants' => $leaderBoard['players_quantity'],
                        'tickets_sold' => $leaderBoard['paid_tickets_count'],
                        'execution_time_ms' => $lotteryExecutionTime
                    ]);

                    $output->writeln("‚úÖ –õ–æ—Ç–µ—Ä–µ—è {$lotteryId} ({$lotteryData['lottery_name']}): {$lotteryData['calculated_winners_count']} –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π");

                } catch (Exception $e) {
                    $errorCount++;
                    $lotteryExecutionTime = round((microtime(true) - $lotteryStartTime) * 1000, 2);

                    $this->logger->error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ª–æ—Ç–µ—Ä–µ–∏', [
                        'lottery_id' => $lotteryData['id'],
                        'lottery_name' => $lotteryData['lottery_name'],
                        'error' => $e->getMessage(),
                        'execution_time_ms' => $lotteryExecutionTime
                    ]);

                    $output->writeln("‚ùå –û—à–∏–±–∫–∞ –ª–æ—Ç–µ—Ä–µ–∏ {$lotteryData['id']}: {$e->getMessage()}");
                }
            }

            $executionTime = round((microtime(true) - $startTime) * 1000, 2);

            $this->logger->info('üèÅ –≠–∫—Å–ø–æ—Ä—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π –∑–∞–≤–µ—Ä—à–µ–Ω', [
                'processed_lotteries' => count($lotteries),
                'success_count' => $successCount,
                'error_count' => $errorCount,
                'execution_time_ms' => $executionTime
            ]);

            $output->writeln("–ó–∞–≤–µ—Ä—à–µ–Ω–æ: –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ {$successCount} –ª–æ—Ç–µ—Ä–µ–π, –æ—à–∏–±–æ–∫: {$errorCount}, –≤—Ä–µ–º—è: {$executionTime}ms");

            return $errorCount > 0 ? Command::FAILURE : Command::SUCCESS;

        } catch (Exception $e) {
            $executionTime = round((microtime(true) - $startTime) * 1000, 2);

            $this->logger->error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏', [
                'error' => $e->getMessage(),
                'execution_time_ms' => $executionTime
            ]);

            $output->writeln("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {$e->getMessage()}, –≤—Ä–µ–º—è: {$executionTime}ms");
            return Command::FAILURE;
        }
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ª–æ—Ç–µ—Ä–µ–∏ –ø–æ ID –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ —ç–∫—Å–ø–æ—Ä—Ç–∞
     */
    private function getLotteryById(int $lotteryId): array
    {
        // –ü–æ–ª—É—á–∞–µ–º –ª–æ—Ç–µ—Ä–µ—é –Ω–∞–ø—Ä—è–º—É—é –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ —ç–∫—Å–ø–æ—Ä—Ç–∞
        $lotteryInfo = $this->ticketService->getLotteryInfo($lotteryId);
        
        if (empty($lotteryInfo)) {
            $this->logger->error('–õ–æ—Ç–µ—Ä–µ—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞', ['lottery_id' => $lotteryId]);
            return [];
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑–æ–≤—ã–µ —É—Å–ª–æ–≤–∏—è
        if ($lotteryInfo['status'] === 'history') {
            $this->logger->error('–õ–æ—Ç–µ—Ä–µ—è —É–∂–µ —Ä–∞–∑—ã–≥—Ä–∞–Ω–∞', ['lottery_id' => $lotteryId]);
            throw new Exception("–õ–æ—Ç–µ—Ä–µ—è {$lotteryId} —É–∂–µ —Ä–∞–∑—ã–≥—Ä–∞–Ω–∞");
        }

        // –ü–æ–ª—É—á–∞–µ–º calculated_winners_count –∏–∑ –º–æ–¥–µ–ª–∏ –Ω–∞–ø—Ä—è–º—É—é –µ—Å–ª–∏ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –¥–∞–Ω–Ω—ã—Ö
        $lottery = LotteryNumber::find($lotteryId);
        if (!$lottery || is_null($lottery->calculated_winners_count)) {
            throw new Exception("–î–ª—è –ª–æ—Ç–µ—Ä–µ–∏ {$lotteryId} –Ω–µ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π");
        }

        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç–µ –∫–∞–∫ –∏–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
        return [[
            'id' => $lotteryInfo['id'],
            'lottery_name' => $lotteryInfo['name'],
            'lottery_type' => $lotteryInfo['type_name'],
            'end_date' => $lotteryInfo['sale_end_date'],
            'draw_date' => $lotteryInfo['draw_date'],
            'calculated_winners_count' => $lottery->calculated_winners_count,
        ]];
    }

    protected function configure(): void
    {
        $this->setName(self::$defaultName)
            ->setDescription(self::$defaultDescription)
            ->addOption('lottery-id', null, InputOption::VALUE_OPTIONAL, 'ID –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ª–æ—Ç–µ—Ä–µ–∏ –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ —ç–∫—Å–ø–æ—Ä—Ç–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ –≥–æ—Ç–æ–≤—ã—Ö –ª–æ—Ç–µ—Ä–µ–π)');
    }
}
