<?php

namespace process;

use app\command\Tickets\Export\ExportDailyFixedTicketsCommand;
use app\command\Tickets\Export\ExportDailyDynamicTicketsCommand;
use app\command\Tickets\Export\ExportJackpotTicketsCommand;
use app\command\Tickets\Export\ExportSupertourTicketsCommand;
use app\enums\LotteryTypeEnum;
use Closure;
use support\Log;
use Symfony\Component\Console\Input\ArrayInput;
use Symfony\Component\Console\Output\BufferedOutput;
use Workerman\Crontab\Crontab;

/**
 * –ü—Ä–æ—Ü–µ—Å—Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —ç–∫—Å–ø–æ—Ä—Ç–∞ –±–∏–ª–µ—Ç–æ–≤ –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –ª–æ—Ç–µ—Ä–µ–π
 * –ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –∫–∞–∂–¥—ã–µ 2 –º–∏–Ω—É—Ç—ã –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –Ω–æ–≤—ã—Ö –±–∏–ª–µ—Ç–æ–≤ –≤ Kafka
 */
class ExportTicketsProcess
{
    private const string PROCESS_LOG_CHANNEL = 'process_export_tickets';

    private array $exportCommands = [
        LotteryTypeEnum::DAILY_FIXED => ExportDailyFixedTicketsCommand::class,
        LotteryTypeEnum::DAILY_DYNAMIC => ExportDailyDynamicTicketsCommand::class,
        LotteryTypeEnum::JACKPOT => ExportJackpotTicketsCommand::class,
        LotteryTypeEnum::SUPERTOUR => ExportSupertourTicketsCommand::class,
    ];

    public function onWorkerStart(): void
    {
        $logger = Log::channel(self::PROCESS_LOG_CHANNEL);
        $logger->info('–ü—Ä–æ—Ü–µ—Å—Å —ç–∫—Å–ø–æ—Ä—Ç–∞ –±–∏–ª–µ—Ç–æ–≤ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω', [
            'cron_schedule' => '*/2 * * * *',
            'description' => '–ó–∞–ø—É—Å–∫ –∫–∞–∂–¥—ã–µ 2 –º–∏–Ω—É—Ç—ã –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –±–∏–ª–µ—Ç–æ–≤ –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –ª–æ—Ç–µ—Ä–µ–π',
            'lottery_types' => array_keys($this->exportCommands)
        ]);

        // –ó–∞–ø—É—Å–∫ –∫–∞–∂–¥—ã–µ 2 –º–∏–Ω—É—Ç—ã
        new Crontab('*/2 * * * *', $this->runExportTicketsCommands());
    }

    /**
     * –ó–∞–ø—É—Å–∫–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã —ç–∫—Å–ø–æ—Ä—Ç–∞ –±–∏–ª–µ—Ç–æ–≤ –¥–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –ª–æ—Ç–µ—Ä–µ–π
     */
    private function runExportTicketsCommands(): Closure
    {
        return function () {
            $logger = Log::channel(self::PROCESS_LOG_CHANNEL);
            $startTime = microtime(true);

            $logger->info('üé´ –ó–∞–ø—É—Å–∫ —ç–∫—Å–ø–æ—Ä—Ç–∞ –±–∏–ª–µ—Ç–æ–≤ –¥–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –ª–æ—Ç–µ—Ä–µ–π', [
                'timestamp' => date('Y-m-d H:i:s'),
                'process_pid' => getmypid(),
                'lottery_types_count' => count($this->exportCommands)
            ]);

            $totalExported = 0;
            $successfulExports = 0;
            $failedExports = 0;

            foreach ($this->exportCommands as $lotteryType => $commandClass) {
                try {
                    $commandStartTime = microtime(true);

                    $logger->info("üîÑ –≠–∫—Å–ø–æ—Ä—Ç –±–∏–ª–µ—Ç–æ–≤ —Ç–∏–ø–∞: {$lotteryType}", [
                        'lottery_type' => $lotteryType,
                        'command_class' => $commandClass
                    ]);

                    // –°–æ–∑–¥–∞–µ–º –∏ –≤—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É
                    $command = new $commandClass();
                    $input = new ArrayInput([]);
                    $output = new BufferedOutput();

                    $exitCode = $command->run($input, $output);
                    $commandOutput = $output->fetch();
                    $commandExecutionTime = round((microtime(true) - $commandStartTime) * 1000, 2);

                    if ($exitCode === 0) {
                        $successfulExports++;

                        // –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –±–∏–ª–µ—Ç–æ–≤ –∏–∑ –≤—ã–≤–æ–¥–∞
                        $exportedCount = $this->extractExportedTicketsCount($commandOutput);
                        $totalExported += $exportedCount;

                        $logger->info("‚úÖ –≠–∫—Å–ø–æ—Ä—Ç {$lotteryType} –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ", [
                            'lottery_type' => $lotteryType,
                            'exit_code' => $exitCode,
                            'execution_time_ms' => $commandExecutionTime,
                            'exported_tickets' => $exportedCount,
                            'output' => trim($commandOutput) ?: '–ù–µ—Ç –≤—ã–≤–æ–¥–∞'
                        ]);
                    } else {
                        $failedExports++;

                        $logger->error("‚ùå –≠–∫—Å–ø–æ—Ä—Ç {$lotteryType} –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π", [
                            'lottery_type' => $lotteryType,
                            'exit_code' => $exitCode,
                            'execution_time_ms' => $commandExecutionTime,
                            'output' => trim($commandOutput) ?: '–ù–µ—Ç –≤—ã–≤–æ–¥–∞'
                        ]);
                    }
                } catch (\Exception $e) {
                    $failedExports++;
                    $commandExecutionTime = round((microtime(true) - $commandStartTime) * 1000, 2);

                    $logger->error("üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ {$lotteryType}", [
                        'lottery_type' => $lotteryType,
                        'error_message' => $e->getMessage(),
                        'error_file' => $e->getFile(),
                        'error_line' => $e->getLine(),
                        'execution_time_ms' => $commandExecutionTime
                    ]);
                }
            }

            $totalExecutionTime = round((microtime(true) - $startTime) * 1000, 2);

            $logger->info('üèÅ –ü—Ä–æ—Ü–µ—Å—Å —ç–∫—Å–ø–æ—Ä—Ç–∞ –±–∏–ª–µ—Ç–æ–≤ –∑–∞–≤–µ—Ä—à—ë–Ω', [
                'total_execution_time_ms' => $totalExecutionTime,
                'total_exported_tickets' => $totalExported,
                'successful_exports' => $successfulExports,
                'failed_exports' => $failedExports,
                'lottery_types_processed' => count($this->exportCommands)
            ]);
        };
    }

    /**
     * –ò–∑–≤–ª–µ–∫–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –±–∏–ª–µ—Ç–æ–≤ –∏–∑ –≤—ã–≤–æ–¥–∞ –∫–æ–º–∞–Ω–¥—ã
     */
    private function extractExportedTicketsCount(string $output): int
    {
        // –ò—â–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω "–ü–æ–ª—É—á–µ–Ω–æ –±–∏–ª–µ—Ç–æ–≤: X" –≤ JSON –ª–æ–≥–∞—Ö
        if (preg_match('/"msg":"–ü–æ–ª—É—á–µ–Ω–æ –±–∏–ª–µ—Ç–æ–≤: (\d+)"/', $output, $matches)) {
            return (int)$matches[1];
        }

        return 0;
    }
}
